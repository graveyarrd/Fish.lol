--// Affection.cc | Clean & Optimized Version
print("Affection.cc | Loaded")

--// SERVICES
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

--// CONFIG (Mist Style)
getgenv().Affection = {
    Keybind = Enum.KeyCode.Q,
    Prediction = 0.125,
    HitPart = "HumanoidRootPart", -- or "Head"
    AntiGround = true, -- toggle ON/OFF
    AirShoot = true
}

--// UI Setup
local AffectionUI = Instance.new("ScreenGui")
AffectionUI.Name = "AffectionUI"
AffectionUI.Parent = game.CoreGui
AffectionUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local Frame = Instance.new("Frame")
Frame.Parent = AffectionUI
Frame.BackgroundTransparency = 1
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.4, 0, 0.4, 0)
Frame.Size = UDim2.new(0, 85, 0, 85)
Frame.Active = true

local UICorner = Instance.new("UICorner")
UICorner.Parent = Frame

local Button = Instance.new("TextButton")
Button.Parent = Frame
Button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
Button.BackgroundTransparency = 0.3
Button.BorderSizePixel = 0
Button.Size = UDim2.new(1, 0, 1, 0)
Button.Text = ""
Button.AutoButtonColor = true

local UICorner_2 = Instance.new("UICorner")
UICorner_2.CornerRadius = UDim.new(0, 12)
UICorner_2.Parent = Button

--// DRAG HANDLER
local dragging, dragStart, startPos
Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
    end
end)

Frame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        Frame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
end)

--// Notification System (Custom)
local notificationFrame = Instance.new("Frame")
notificationFrame.Size = UDim2.new(0, 180, 1, 0)
notificationFrame.Position = UDim2.new(1, -200, 0, 20)
notificationFrame.BackgroundTransparency = 1
notificationFrame.Parent = AffectionUI

local function showNotification(text)
    local note = Instance.new("TextLabel")
    note.Size = UDim2.new(0, 140, 0, 25)
    note.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    note.BackgroundTransparency = 0.5
    note.TextColor3 = Color3.fromRGB(255, 255, 255)
    note.Font = Enum.Font.GothamBold
    note.TextSize = 12
    note.Text = text
    note.TextXAlignment = Enum.TextXAlignment.Center
    note.TextYAlignment = Enum.TextYAlignment.Center
    note.Position = UDim2.new(0, 0, 0, (#notificationFrame:GetChildren() - 1) * 28)
    note.Parent = notificationFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = note

    local blur = Instance.new("UIStroke", note)
    blur.Thickness = 1
    blur.Color = Color3.fromRGB(255, 255, 255)
    blur.Transparency = 0.8

    task.spawn(function()
        wait(1.5)
        for i = 1, 10 do
            note.TextTransparency = i / 10
            note.BackgroundTransparency = 0.5 + (i / 10)
            wait(0.05)
        end
        note:Destroy()
    end)
end

showNotification("Affection.cc Loaded")

--// Variables
local camlockEnabled = false
local lockedPlayer = nil
local Config = getgenv().Affection

--// Functions
local function getClosestPlayer()
    local closest, shortest = nil, math.huge
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild(Config.HitPart) then
            local pos, onScreen = Camera:WorldToViewportPoint(p.Character[Config.HitPart].Position)
            if onScreen then
                local dist = (Vector2.new(pos.X, pos.Y) - screenCenter).Magnitude
                if dist < 150 and dist < shortest then
                    shortest = dist
                    closest = p
                end
            end
        end
    end
    return closest
end

local function toggleCamlock()
    if not camlockEnabled then
        local target = getClosestPlayer()
        if target then
            camlockEnabled = true
            lockedPlayer = target
            showNotification("Locked: " .. target.Name)
        else
            showNotification("No player found")
        end
    else
        camlockEnabled = false
        lockedPlayer = nil
        showNotification("Lock Disabled")
    end
end

--// Button + Keybind
Button.MouseButton1Click:Connect(toggleCamlock)
UserInputService.InputBegan:Connect(function(input, gp)
    if not gp and input.KeyCode == Config.Keybind then
        toggleCamlock()
    end
end)

--// Auto-Unlock Events
Players.PlayerRemoving:Connect(function(player)
    if player == lockedPlayer then
        camlockEnabled = false
        lockedPlayer = nil
        showNotification("Target left, lock disabled")
    end
end)

LocalPlayer.CharacterAdded:Connect(function()
    camlockEnabled = false
    lockedPlayer = nil
    showNotification("Respawned, lock disabled")
end)

--// Main Loop
RunService.RenderStepped:Connect(function()
    if camlockEnabled and lockedPlayer and lockedPlayer.Character then
        local humanoid = lockedPlayer.Character:FindFirstChildOfClass("Humanoid")
        local hitPart = lockedPlayer.Character:FindFirstChild(Config.HitPart)
        local rootVel = hitPart and hitPart.Velocity

        if humanoid and humanoid.Health > 5 and hitPart then
            local predictedPos = hitPart.Position + (rootVel * Config.Prediction)

            -- Anti-Ground
            if Config.AntiGround and humanoid.FloorMaterial ~= Enum.Material.Air then
                predictedPos = predictedPos + Vector3.new(0, 2.5, 0)
            end

            -- Camera Lock
            local camPos = Camera.CFrame.Position
            local dir = (predictedPos - camPos).Unit
            local newPos = camPos + dir * 0.12
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(newPos, predictedPos), 0.9)

            -- AirShoot
            if Config.AirShoot and humanoid.FloorMaterial == Enum.Material.Air then
                local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
                if tool then tool:Activate() end
            end
        else
            camlockEnabled = false
            lockedPlayer = nil
            showNotification("Target died, lock disabled")
        end
    end
end)
